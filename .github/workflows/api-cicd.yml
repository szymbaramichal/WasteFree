name: Build and Deploy API Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore API/WasteFree.sln

      - name: Build API
        run: dotnet build API/WasteFree.sln --configuration Release --no-restore

      - name: Publish API
        run: dotnet publish API/WasteFree.App/WasteFree.App.csproj --configuration Release --output ./publish

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/wastefree-api:latest -f API/Dockerfile ./API

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/wastefree-api:latest

      - name: Deploy API over SSH
        uses: appleboy/ssh-action@v1
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DB_CONN_STRING: ${{ secrets.DB_CONN_STRING }}
          INTEGRATIONS__SMTP__PASSWORD: ${{ secrets.INTEGRATIONS__SMTP__PASSWORD }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script_stop: true
          envs: DOCKERHUB_USERNAME,DB_CONN_STRING,INTEGRATIONS__SMTP__PASSWORD
          script: |
            set -euo pipefail

            U=${DOCKERHUB_USERNAME,,}

            IMAGE="${U}/wastefree-api:latest"
            echo "Using IMAGE=${IMAGE}"

            docker stop wastefree-api || true
            docker rm wastefree-api || true

            docker pull "$IMAGE"
            docker run -d --restart unless-stopped --name wastefree-api \
              -p 8080:8080 \
              -e "ConnectionStrings__SqlServerDatabase=$DB_CONN_STRING" \
              -e "Integrations__Smtp__Password=$INTEGRATIONS__SMTP__PASSWORD" \
              "$IMAGE"
            docker image prune -f || true